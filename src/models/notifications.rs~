use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use time::OffsetDateTime;

#[derive(Debug, Serialize, Deserialize, FromRow)]
pub struct Notification {
    pub id: i32,
    pub recipient_id: i32,      // Team lead's user ID
    pub leave_request_id: i32,
    pub message: String,
    pub is_read: bool,
    pub created_at: OffsetDateTime,
}

// src/handlers/notification.rs
use axum::{
    extract::State,
    response::Html,
    Extension,
};
use sqlx::PgPool;

pub async fn create_notification(
    pool: &PgPool,
    recipient_id: i32,
    leave_request_id: i32,
    message: String,
) -> Result<(), sqlx::Error> {
    sqlx::query!(
        r#"
        INSERT INTO notifications (recipient_id, leave_request_id, message, is_read, created_at)
        VALUES ($1, $2, $3, false, CURRENT_TIMESTAMP)
        "#,
        recipient_id,
        leave_request_id,
        message,
    )
    .execute(pool)
    .await?;

    Ok(())
}

pub async fn get_notifications(
    State(pool): State<PgPool>,
    Extension(user_id): Extension<i32>,
) -> Html<String> {
    let notifications = sqlx::query_as!(
        Notification,
        r#"
        SELECT * FROM notifications
        WHERE recipient_id = $1 AND is_read = false
        ORDER BY created_at DESC
        "#,
        user_id
    )
    .fetch_all(&pool)
    .await
    .unwrap_or_default();

    // Render notifications HTML
    let notifications_html = notifications
        .iter()
        .map(|notif| {
            format!(
                r#"
                <div class="notification" id="notification-{}" 
                     hx-get="/leave-requests/{}"
                     hx-target="#main-content"
                     hx-swap="innerHTML">
                    <p>{}</p>
                    <small>{}</small>
                    <button class="mark-read-btn"
                            hx-post="/notifications/{}/mark-read"
                            hx-swap="outerHTML">
                        Mark as read
                    </button>
                </div>
                "#,
                notif.id, notif.leave_request_id, notif.message,
                notif.created_at.format("%Y-%m-%d %H:%M"),
                notif.id
            )
        })
        .collect::<String>();

    Html(notifications_html)
}

pub async fn mark_notification_read(
    State(pool): State<PgPool>,
    Path(notification_id): Path<i32>,
) -> impl IntoResponse {
    sqlx::query!(
        r#"
        UPDATE notifications
        SET is_read = true
        WHERE id = $1
        "#,
        notification_id
    )
    .execute(&pool)
    .await
    .unwrap_or_default();

    // Return empty response as the element will be removed
    Html("")
}

// In your leave request handler, after saving the request:
pub async fn submit_leave_request(
    State(pool): State<PgPool>,
    Extension(user_id): Extension<i32>,
    Form(leave_request): Form<LeaveRequest>,
) -> impl IntoResponse {
    // ... save leave request logic ...

    // Get team lead's user ID
    let team_lead_id = sqlx::query_scalar!(
        "SELECT team_lead_id FROM team_members WHERE user_id = $1",
        user_id
    )
    .fetch_one(&pool)
    .await
    .unwrap_or_default();

    // Create notification for team lead
    create_notification(
        &pool,
        team_lead_id,
        leave_request.id,
        format!("New leave request from {}", leave_request.employee_name),
    )
    .await
    .unwrap_or_default();

    // ... rest of the handler ...
}
